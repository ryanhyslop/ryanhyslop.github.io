<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan Hyslop - I Design &amp; Develop Experiences For The Web</title>
    <description>I Design &amp; Develop Experiences For The Web</description>
    <link>http://ryanhyslop.uk/</link>
    <atom:link href="http://ryanhyslop.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 05 May 2015 21:35:03 +0100</pubDate>
    <lastBuildDate>Tue, 05 May 2015 21:35:03 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Passive Learning</title>
        <description>&lt;p&gt;With the industry moving at the rate it does, keeping up to date can feel like treading water. Luckily the web is as generous as it is changing, and there is a wealth of resources to keep give you a continuous exposure to the the information you need to keep on top of the changing tides of the web.&lt;/p&gt;

&lt;h2 id=&quot;staying-on-the-curve&quot;&gt;Staying on the curve&lt;/h2&gt;

&lt;p&gt;For me the key to staying afloat in this industry is passive learning. The idea being to try and expose yourself to as many entertaining and casual sources of information during natural ‘dead time’ without the pressure of having to retain the detail. Classic examples being on a commute or long journey, weekend mornings etc. Ideally with exposure to many lines of thought and technologies you’ll have a base of information that you can call on if required to go into deeper detail, providing you with hooks rather than solid understanding.&lt;/p&gt;

&lt;p&gt;Below are list of resources I use to try and increase my exposure to more information in a less intrusive way.&lt;/p&gt;

&lt;h2 id=&quot;podcasts&quot;&gt;Podcasts&lt;/h2&gt;
&lt;p&gt;The ultimate in passive learning, podcasts are brilliant for either listening to a discussion intently or simply having on in the background and tuning in when something relevant is being mentioned. A few that have proved incredibly valuable for me recently are;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://devchat.tv/js-jabber/&quot;&gt;Javascript jabber&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ttlpodcast.com/&quot;&gt;TTL Podcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shoptalkshow.com/&quot;&gt;Shop Talk show&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thewebahead.net/&quot;&gt;The Web Ahead &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://styleguides.io/podcast/&quot;&gt;Styleguide podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;newsletters&quot;&gt;Newsletters&lt;/h2&gt;
&lt;p&gt;Little drops of goodness on  a random weekday morning, can be a bit of a double edge sword if you don’t read them regularly but again the idea here is that theres no pressure, have a quick scan and archive you can always search your inbox to recall the bits you need when appropriate.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://html5weekly.com/&quot;&gt;html5 weekly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascriptweekly.com/&quot;&gt;javascript weekly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.theuxnewsletter.com/&quot;&gt;the ux newsletter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ng-newsletter.com/&quot;&gt;ng-newsletter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodui.org/&quot;&gt;Good UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;print&quot;&gt;Print&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.creativebloq.com/net-magazine&quot;&gt;.net&lt;/a&gt; having recently transformed itself, it has brought itself back from the brink of me cancelling my subscription. Focusing more on advanced topics and opinions means it’s creating more unique content and is a refreshing non screen way of absorbing web news, a nice one to just have on the coffee table to dip into when lying around.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://abookapart.com/&quot;&gt;A Book Apart&lt;/a&gt; Basically anything by these guys, short, to the point, and easy to dip in and out of or finish in a few hours.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;meetups&quot;&gt;Meetups&lt;/h2&gt;

&lt;p&gt;I’m incredibly lucky to work in a part of the world that is awash with some of the most talented and enthusiastic individuals in our field. In that comes the opportunity to attend a lot of events, mostly free or inexpensive, where can hear some leading thoughts and socialise and learn with others. Its an area that I should probably make more of an effort but the two events below are certainly worth a mention, if you get a chance, go.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://londonwebstandards.org/&quot;&gt;London Web Standards&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.frontendlondon.co.uk/&quot;&gt;Frontend London&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tweetdeck.twitter.com/&quot;&gt;Tweet deck&lt;/a&gt; - Helps to organise the barf that can be a twitter timeline, creating columns for popular people and topics give you a nice place to scan for anything ’trending’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; - Where content goes to die, but only if you let it. Again this is a perfect place to save articles and videos for you to dip into when the time is more appropriate. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Naturally people learn differently, and making sure you don’t feel overwhelmed is an increasingly common problem facing developers. I’d certainly be interested in what other resources people use to help them stay on their game.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 18:02:58 +0100</pubDate>
        <link>http://ryanhyslop.uk/2015/05/04/passive-learning.html</link>
        <guid isPermaLink="true">http://ryanhyslop.uk/2015/05/04/passive-learning.html</guid>
        
        
      </item>
    
      <item>
        <title>2013 - A retrospective</title>
        <description>&lt;p&gt;These types of posts are a little bit cliche but I felt, given the fast moving pace of our industry and how it can continually feel like you don’t know enough, its important to reflect on how far you’ve come from time to time, and I suppose a new year brings that sentiment to the surface easier than other times.&lt;/p&gt;

&lt;p&gt;This past year (and the latter part of 2012) has involved some of the biggest changes in my life since I moved away from home to Leeds University in 2004; New job, new home, and new challenges. I’d like this post to capture what I feel like I’ve learned, where I’ve improved and aspirations for 2014.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;agile-amp-lean&quot;&gt;Agile &amp;amp; Lean&lt;/h2&gt;
&lt;p&gt;The past year exposed me to a full on agile workflow for the first time. There was quite a learning curve, admittedly, especially getting involved with the requirements gathering at the start of a project. It also took me a little while to adjust to the idea that we could involve design alongside a regular development sprint. Whilst I could fully understand the merits of not doing upfront design, I struggled initially with the practicalities of how that fits into the process ( Kirsten has wrote some &lt;a href=&quot;http://www.uvd.co.uk/blog/designing-for-user-stories/&quot; title=&quot;Designing for user stories&quot;&gt;excellent&lt;/a&gt; &lt;a href=&quot;(http://www.uvd.co.uk/blog/stop-doing-upfront-design-its-a-waste-of-time/&quot; title=&quot;Stop doing upfront design its a waste of time&quot;&gt;articles&lt;/a&gt; on just how we do that).&lt;/p&gt;

&lt;p&gt;My interest towards the latter part of the year has been in trying to improve the integration of a design workflow into our general agile process. We’ve had quite a bit of success in pulling user stories into the design workflow one sprint ahead of the development cycle, and working incredibly tightly with the development team and the client to ensure we get a cross pollination of ideas and buy-in from all parties prior to development starting on that user story.&lt;/p&gt;

&lt;p&gt;One area that I know I could improve is in advocating and facilitating the involvement of more users in this workflow. Having read the rather excellent &lt;a href=&quot;http://www.abookapart.com/products/just-enough-research&quot;&gt;‘Just enough research’&lt;/a&gt; over the holidays I’m keen to explore introducing some end user research into our design process this year.&lt;/p&gt;

&lt;h2 id=&quot;frontend-tooling-and-workflow&quot;&gt;Frontend Tooling and Workflow&lt;/h2&gt;

&lt;p&gt;Last year exposed me to quite a few new technologies and processes that have pretty much changed the way I work.&lt;/p&gt;

&lt;h3 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; is a utility that allows you to share portable development environments that you can spin up as Virtual Machines. Whilst its not something I’ve had much of an active input in curating its certainly an interesting way of managing and switching your development environments, and especially helps keep your host machine free of clutter. I will be keeping an eye on &lt;a href=&quot;https://www.docker.io/&quot;&gt;Docker&lt;/a&gt; this year as it seems to be gaining quite a bit of popularity.&lt;/p&gt;

&lt;h3 id=&quot;grunt&quot;&gt;Grunt&lt;/h3&gt;
&lt;p&gt;Quite frankly one of the best tools in a frontend arsenal at the moment. I started off using it to watch and compile changes to sass files and since then I’ve used it for everything from image optimisation, live reload, running javascript tests and building out minified and concatenated js/css resources. I even had a go a creating my own plugin to build and serve a pattern library from static assets ( &lt;a href=&quot;https://github.com/ryanhyslop/grunt-pattern-knit&quot;&gt;Pattern Knit&lt;/a&gt; ) - which admittedly needs some improvements but have found it works quite well on some recent projects. I still think I’m not making the most of Grunt currently, so I’m looking to try and write a few more tasks this year, and will be keeping an eye on &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt; which seems to be gaining some traction as an alternative to Grunt.&lt;/p&gt;

&lt;h3 id=&quot;yeoman&quot;&gt;Yeoman&lt;/h3&gt;
&lt;p&gt;I took a bit of a dive into Yeoman this year with the Angular generator. I didn’t have a particularly great experience with it as we unfortunately started using it just as it hit the 1.0 release and there were some issues with the Angular generator. I’d really like to get more involved with it for a new project and perhaps invest time in learning more about developing generators for it ( and for grunt ) so we can make it work better for us in the future.&lt;/p&gt;

&lt;h3 id=&quot;bower&quot;&gt;Bower&lt;/h3&gt;

&lt;p&gt;Admittedly I struggled with the concept of bower at the start. I felt that, for most of the projects I’d worked on, simply committing whatever 3rd party libraries the project depended on was sufficient. I still think that for your typical web site development bower may be a bit much, but it really comes into its own when developing a web application. Alongside Grunt, Bower has made deploying a recent project so much more reliable.
It facilitates a modularity in your build system and repositories, most web apps are built with a collection of individual, dependant modules and bower makes managing this incredibly easy.&lt;/p&gt;

&lt;h3 id=&quot;behaviour-driven-development&quot;&gt;Behaviour Driven Development&lt;/h3&gt;

&lt;p&gt;A new concept to me at the start of the year. The principle being that the acceptance criteria for a feature is written in human readable language - using &lt;a href=&quot;http://docs.behat.org/guides/1.gherkin.html&quot;&gt;Gerkin&lt;/a&gt; - forged from user stories, and using a tool, in our case Behat, write tests that validate the application is doing what it needs to to support those user stories. It requires quite an investment in time and approach to get working currently, and that approach can change from project to project. In a rapidly changing project we’ve found these tests can provide a bigger return on investment than our regular unit tests as at least we know the feature is still working, which ultimately is the most important thing.&lt;/p&gt;

&lt;p&gt;Related to this a personal milestone last year was actually doing a in house talk on this very subject &lt;a href=&quot;http://www.youtube.com/watch?v=DeXGZQkGqpA&quot;&gt;Full Stack Behaviour Driven Development: From Backend to Frontend&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m currently keeping an eye on the &lt;a href=&quot;https://github.com/cucumber/cucumber-js&quot;&gt;Cucumber.js&lt;/a&gt; project with the hope that it will reach point where it could potentially play a part in our future BDD workflow.&lt;/p&gt;

&lt;h3 id=&quot;robohydra&quot;&gt;Robohydra&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://robohydra.org/&quot;&gt;Robohydra&lt;/a&gt; is a fantastic little tool thats worth a mention, it essentially allows you to configure it to return mock data or static files back from URLs. This is immensely helpful for quick debugging a live site with local assets or to develop a client and mock the backend responses. &lt;a href=&quot;http://robsquir.es/blog/2013/03/06/bdd-tips-mocking-an-api/&quot; title=&quot;BDD tips mocking an api&quot;&gt;This post&lt;/a&gt; by Rob gives a great insight into how we’ve used it in the past. I’ve found it especially useful used in conjunction with &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman-rest-client&quot;&gt;Postman REST client&lt;/a&gt; to test your frontend without needing the backend to be available to support it.&lt;/p&gt;

&lt;h2 id=&quot;javascript-amp-frameworks&quot;&gt;Javascript &amp;amp; Frameworks&lt;/h2&gt;

&lt;p&gt;Circa late 2011 my javascript skills had been limited to UI behaviours and relied quite heavily on jQuery. This past year has seen me dive deeper into javascript itself gaining a much better understanding of the language and software design principles in general. Whilst I don’t aspire to be a software developer, I’ve felt like I really want to push my javascript development as far as I can take it, simply because I enjoy it.&lt;/p&gt;

&lt;p&gt;This past year has seen me gain some practical experience developing apps with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone.js&lt;/a&gt; and &lt;a href=&quot;http://angularjs.org/&quot;&gt;Angular.js&lt;/a&gt; and testing them with &lt;a href=&quot;http://visionmedia.github.io/mocha/&quot;&gt;Mocha&lt;/a&gt;, &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt;, &lt;a href=&quot;http://sinonjs.org/&quot;&gt;Sinon&lt;/a&gt; and &lt;a href=&quot;http://karma-runner.github.io/0.10/index.html&quot;&gt;Karma&lt;/a&gt;. Whilst the merits of each of these is beyond the scope of this article, I feel like I’ve been fortunate to gain exposure to some best in class tools that have given me a well rounded skill set when approaching development for web applications.&lt;/p&gt;

&lt;p&gt;This year I want to invest more time in learning more about changes coming in ES6 and the impact they will have. I’d also like to spend a bit more time understanding javascript design patterns and general architecture best practices to allow me to make better informed decisions when developing. There are some interesting changes in the javascript MVC world thats worth keeping a breast of, as outlined in &lt;a href=&quot;http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ultimatelyhellip&quot;&gt;Ultimately…&lt;/h3&gt;
&lt;p&gt;my take away from the past year is that whilst I feel I’ve learned a lot I don’t feel like I’ve expressed that learning in any other way than my day to day work activities. With that in mind, I’m aspiring that 2014 be the year that I start experimenting more and documenting more, starting with this rather laboured post itself.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jan 2014 14:18:00 +0000</pubDate>
        <link>http://ryanhyslop.uk/reflection/review/2014/01/02/2013-a-retrospective.html</link>
        <guid isPermaLink="true">http://ryanhyslop.uk/reflection/review/2014/01/02/2013-a-retrospective.html</guid>
        
        
        <category>reflection</category>
        
        <category>review</category>
        
      </item>
    
      <item>
        <title>Magento Theming: Working With Layout</title>
        <description>&lt;p&gt;Any frontend developer who’s taken a passive interest or a curious look into Magento theming will remember the moment when they recoiled and thought; “Honestly, wtf”.&lt;/p&gt;

&lt;p&gt;It’s in our nature as developers to dive into things, at least initially. If something catches our interest we want to see straight away how it works, so rather than reading around a subject, perhaps doing a tutorial first, we rip off the mask and see the god awful monster staring back at us. We scream, it screams and we all run away, and for some people thats enough Magento for them.&lt;/p&gt;

&lt;p&gt;There’s no denying the theming engine in Magento takes patience to learn and can be frustrating in places, notably due to a lack of documentation and the blind ineffectively leading the blind.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post wont teach you how to theme in magento but will detail some general concepts and tips to do some common things that should ease your pain.&lt;/em&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Layouts&lt;/h2&gt;
&lt;p&gt;The layout part of Magento theming is generally the one that catches most people out, since its quite unique to Magento. If you’re still struggling to grasp the relationship between the layout xml files and the templates the best ‘non-technical’ description I can give, is that your Template files ( the .phtml ) provide a placeholder ( $this-&amp;gt;getChildHtml(‘’); ) for your layout blocks to insert themselves into. You can then order your blocks, remove some in your layout xml documents. Why is this better than editing the .phtml files? Enter local.xml&lt;/p&gt;
&lt;h2&gt;local.xml&lt;/h2&gt;
&lt;p&gt;If you’ve done any level Magento development and not used local.xml in your theme, prepare to kick yourself.&lt;/p&gt;

&lt;p&gt;Some outdated tutorials and forum posts, and indeed the template layer, encourage you to copy the files you want to change over from the base theme into your local theme. Gotta change something in catalog.xml? Easy, just copy that to &lt;em&gt;/mytheme/default/layout/&lt;/em&gt; right? Well you could, it would work, but overriding hundreds of lines of core code just to change 1 line is overkill, not to mention if an upgrade changes catalog.xml a bit then things are gonna break, hard.&lt;/p&gt;

&lt;p&gt;I won’t pander too much as most themers will be aware of this file but essentially it lets you add layout handles that effect modules throughout the site. Need to remove the newsletter module signup from across the site? Rather than edit newsletter.xml. Just add the following to the local.xml:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;default&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;left.newsletter&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/default&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can control so much with local.xml it should most likely be the &lt;em&gt;only&lt;/em&gt; file in your themes layout/ folder, so then, what can we do?&lt;/p&gt;
&lt;h2&gt;Referencing and Moving&lt;/h2&gt;
&lt;p&gt;If there is something you need to amend, first find its handle in its module’s xml file. For example the Product view uses catalog.xml and its ‘handle’ is catalog_product_view. Create the relevant nodes in your local.xml&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;catalog_product_view&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Now we can override stuff from the catalog.xml, 1 line, 2 lines or everything if needed --&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/catalog_product_view&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve specified the handle you need to open a reference to the area you want to influence, the reference is the ‘name’ of the parent node. So still using catalog.xml and the catalog_product_view as an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;catalog/product_view&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;product.info&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;template=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;catalog/product/view.phtml&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ....
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;catalog/product_view_description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;product.description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;template=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;catalog/product/view/description.phtml&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ....
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/block&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case if we wanted to effect “product.description” we’d open up a reference to its parent “product.info” :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;catalog_product_view&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;product.info&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- we can now effect anything inside this reference --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/catalog_product_view&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More often than not you’ll be calling a higher level reference such as “content”, “left” or “right”.&lt;/p&gt;

&lt;p&gt;One of the most common things you’ll need to do is either remove elements or move them around, so lets look at the best way of doing that.&lt;/p&gt;
&lt;h3&gt;&quot;Definately wont be needing that&quot;&lt;/h3&gt;
&lt;p&gt;If you absolutely do not need something in your templates you can call remove on it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;catalog_product_view&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;product.info&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;product.description&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/catalog_product_view&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means its completely removed from the theme, we can’t use it anywhere else, which in this case is possibly a bad idea, what if we just wanted to put it somewhere else?&lt;/p&gt;
&lt;h3&gt;&quot;I wanna put that over there&quot;&lt;/h3&gt;
&lt;p&gt;Say you don’t want the breadcrumbs rendering where they do normally, you want to put them in another reference you’ve styled differently, you’ve created the reference now you want to stick the breadcrumbs in there:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;default&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsetChild&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;name&amp;gt;&lt;/span&gt;breadcrumbs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;masthead.sub&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;insert&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;child&amp;gt;&lt;/span&gt;breadcrumbs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/child&amp;gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/default&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These sort of things are really handy as they stop you touching the template files which is always a good thing if you can get away with it.&lt;/p&gt;
&lt;h3&gt;&quot;But I need to put that somewhere that doesn&#39;t have  a reference&quot;.&lt;/h3&gt;
&lt;p&gt;Why not create a new reference? I’ve found myself having to do this for things like “masthead” where theres an area between the normal header and the main page and I want to inject banners or other content to it. A lot of documentation tells you to add them to page.xml, but you can add them in your local.xml in the root reference:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;default&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;core/text_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;masthead&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;masthead&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;translate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Masthead&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/default&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For those that may not know the default handle effects every page on the site, and the root reference is, well its the very top reference. You can do other cool things here like set the default template for every page, within your local.xml&lt;/p&gt;
&lt;h3&gt;&quot;Hey, everything has a 3 columns by default, most my pages are two column left&quot;&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;default&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;setTemplate&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;template&amp;gt;&lt;/span&gt;page/2column-left.phtml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/default&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Boom! Everything will now be 2 column left unless overridden somewhere else, you can leave page.xml in the base theme.&lt;/p&gt;
&lt;h2&gt;Other Little Tricks&lt;/h2&gt;
&lt;p&gt;In Magento sometimes the little things can be the most frustrating, here are a couple of problems I’ve run into with some snippets to save the pain.&lt;/p&gt;
&lt;h3&gt;&quot;The product grid is showing 3 items per row, dammit I need 4!&quot;&lt;/h3&gt;
&lt;p&gt;This little nugget will help you here, I keep coming back to it so its actually good I have it published somewhere:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;product_list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;setColumnCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;count&amp;gt;&lt;/span&gt;4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/count&amp;gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&quot;If only I could wrap that block in another div and set a class on it&quot;&lt;/h3&gt;
&lt;p&gt;Before you go reaching to override that template file just to wrap the block in a container for styling purposes, have a little consideration for this snippet. It’ll wrap your target block (myblock) in a div element and you can set a class on it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page/html_wrapper&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myblock.wrapper&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;setElementClass&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;value&amp;gt;&lt;/span&gt;my-wrapper-classname&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page/html&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myblock&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- add your block in here --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/block&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&quot;I can&#39;t stands no more&quot;&lt;/h3&gt;
&lt;p&gt;We’ll leave it there then, I hope the above helps someone as I’ve had to learn some of these lessons the hard way over the years, I’ll try and continue to put out stuff that will help beginner magento themers get it right the easy way in the future.&lt;/p&gt;

&lt;p&gt;Its important to note that we do poke fun at Magento for being difficult, but in reality its a massively complicated and immensely powerful platform, and in the right hands you can do amazing things, very quickly. You just need to train those hands.&lt;/p&gt;

&lt;p&gt;Futher Reading : &lt;a href=&quot;http://magebase.com/magento-tutorials/demystifying-magentos-layout-xml-part-1/&quot;&gt;http://magebase.com/magento-tutorials/demystifying-magentos-layout-xml-part-1/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Oct 2012 22:08:00 +0100</pubDate>
        <link>http://ryanhyslop.uk/magento/2012/10/25/magento-theming-working-with-layout.html</link>
        <guid isPermaLink="true">http://ryanhyslop.uk/magento/2012/10/25/magento-theming-working-with-layout.html</guid>
        
        
        <category>magento</category>
        
      </item>
    
      <item>
        <title>Taming the Sheet - Thoughts on modern CSS Authoring</title>
        <description>&lt;p&gt;One of the biggest challenges once a developer has a grasp of new language is how to implement it effectively and sensibly.&lt;/p&gt;

&lt;p&gt;A lot of established languages have design patterns to draw upon, blueprints of code that experienced developers over time have curated as ‘best practice’. These patterns or approaches give newer developers a reference point to see how developing in a certain manner will be more effective.&lt;/p&gt;

&lt;p&gt;CSS has always lacked this, as by its very nature it is very flexible and the types of sites it can be applied to vary enormously, never the less browser implementation of more advanced CSS modules has exploded over the past 2 years and our stylesheets are growing as are the complexity of the websites we are building. We. Need. Order!
&lt;!--more--&gt;
Fortunately people are stepping back and thinking about how we can tame these unwieldily documents of hashes and dots. In my opinion there are 2 major areas in which, once considered, can dramatically change the way you author CSS, for the better of course.&lt;/p&gt;
&lt;h2&gt;1. Build Components, Not Pages.&lt;/h2&gt;
&lt;p&gt;The DRY principle is a foundation of software engineering, put simply if you’re writing the same stuff over and over again a voice in your head should be tutting disapprovingly and spurring you into thinking “Surely there’s a better way”, enter OOCSS.&lt;/p&gt;

&lt;p&gt;In production we’re historically used to developing pages individually, Ok thats the homepage done now lets look at the product page, our approach to building parts of these pages can generally be reflected in our Stylesheets and Markup&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#home-products&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#catalog-index&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.product-list&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These ( slightly exaggerated ) examples illustrate that we’ve styled up an area of the page based on either; where it is, or its function. The key issue here is, at a top level, these elements may have styles in common with other components, or these components could move within the site layout.&lt;/p&gt;

&lt;p&gt;Addressing these issues doesn’t require learning new techniques, syntax or properties, just a slight change in approach. By stepping back from the design and identifying layout and style patterns that can be abstracted into small classes that can be applied to multiple elements.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.list-inline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we now have a more generic class that we can apply to anything that needs to be floated left with a margin, and this leads us on nicely to…&lt;/p&gt;
&lt;h2&gt;2. Form not Function.&lt;/h2&gt;
&lt;p&gt;Theres been quite a bit of discussion lately on the merit of ‘semantic classnames’ in css, usually with an arrest trial and execution of ‘.red {}’, but that could be the subject of another post entirely. There is a lot to be said however, for decoupling your class names from what it is your styling, and providing a classname that is more appropriate to the output.&lt;/p&gt;

&lt;p&gt;A Good example is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; .callout&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; - A base class to format areas that need to stand out from other content&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.callout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.callout-important&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we are defining a class that’ll style an area of our site that stands out from the rest of the site, calling out, if you will. What this example further illustrates is the idea of establishing a ‘base’ class, and extending it with variations, we then apply these classes as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;callout callout-important&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A personal favourite example of abstracting shared styles to a root class for sub classes to extend is one Harry Robberts ( @csswizardry ) demo’d on jsfiddle for buttons:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* Buttons */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Normalise fonts across &amp;lt;;a&amp;gt;;s and form buttons. */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Normalise hover behaviour. */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Normalise hover behaviour. */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Normalise border styles (or lack thereof). */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Remove line-height so we can size with padding. */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Normalise display state. */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;/* Cosmetics */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Set in ems so we can scale buttons up with font-size alone. */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#ACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#FAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn-sml&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;75em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn-lrg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.5em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we have 1 class, that when applied to either an anchor, input or button element will render the same style. If we need a bigger button, we create a sub class with any additional styles or overrides, and add both classes to the element.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn btn-sml&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Small button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wizardry indeed.&lt;/p&gt;
&lt;h2&gt;Organisation&lt;/h2&gt;
&lt;p&gt;A big challenge for yourself, and especially in a team is harmonising your coding preferences and style into a format that works best for everyone. Ultimately the key is to establish a convention and stick to it, I do feel though it slightly naive to stick to an approach you’ve developed yourself without looking at what other people are doing.&lt;/p&gt;

&lt;p&gt;In my opinion a landmark publication in this area is Jonathan Snooks‘ SMACSS.&lt;/p&gt;

&lt;p&gt;In its own words…&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;SMACSS is a way to examine your design process and as a way to fit those rigid frameworks into a flexible thought process. It is an attempt to document a consistent approach to site development when using CSS&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;I can’t recommend this book enough for an introduction into really considering how you write and organise your CSS. One of the huge benefits of Jonathans ( or Mr Snook, to give him his full Dr Suess name) approach is that its open to interpretation and it gives you ideas, but maintains a solid but transferable philosophy that advocates a modular coding style.&lt;/p&gt;

&lt;p&gt;Some of my takeaway points from SMACCS are:&lt;/p&gt;
&lt;h3&gt;Organisation of your code into:&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Base&lt;/li&gt;
    &lt;li&gt;Layout&lt;/li&gt;
    &lt;li&gt;Module&lt;/li&gt;
    &lt;li&gt;State&lt;/li&gt;
    &lt;li&gt;(Theme)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This organisation reinforces the idea of the cascade and inheritance in CSS, and indeed the order in which your code should nest.&lt;/p&gt;

&lt;p&gt;The base provides your defaults, its styling to &lt;em&gt;elements&lt;/em&gt; not classes, and will step up if you don’t provide any further styling with your modules. Layout houses your modules, it provides the grid, the structure for which the modules will sit.
Your modules are “discrete component[s] of the page”, they are developed in a manner so they could be moved within a layout, or reused in varying contexts and still maintain their appearance. Modules can extend one another (as we’ve previously seen) to provide variance to a widget or component.&lt;/p&gt;

&lt;p&gt;Lastly state provides overruling styles, typically to a module, depending on what it should be communicating (eg.loading, success, error).&lt;/p&gt;
&lt;h3&gt;Prefixing of your layout rules &amp;amp; namespacing of modules&lt;/h3&gt;
&lt;p&gt;Admittedly not something I’d given much thought till until I’d read SMACCS but one of those things that I’m taking for granted now. Our layout classes govern the structure of our site and so we can tell thats the case with our class names we prefix them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.l-main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;70%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.l-sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.l-masthead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Immediately when viewing our markup we can see these classes are providing layout rules to our elements:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l-main&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;callout&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l-sidebar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;callout callout-minor&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;by the way..&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The benefit of prefixing your layout rules (and state as we’ll see) is that modules, which make up the bulk of your site, can remain prefix less as we can assume if it hasn’t got a prefix, its a module. This lets us avoid things like:
&lt;em&gt;.m-searchresult&lt;/em&gt;
or
&lt;em&gt;.searchresult-obj&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Its just &lt;em&gt;.searchresult.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How do we organise our modules then?&lt;/p&gt;
&lt;h3&gt;Namespacing&lt;/h3&gt;
&lt;p&gt;Taking our search result for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.searchresult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.searchresult-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.searchresult-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Prefixing our modules components with its name is fairly self explanatory in its benefits, it keeps the code organised and we know exactly what it is applied to. Its specific, a bit, too, damn specific!&lt;/p&gt;

&lt;p&gt;The huge benefit to these low level selectors is that we can mix and match modules to reuse common design patterns throughout the site. Our search result example, since it has an image, would probably have an image and text inline with one another. This is a common pattern identified in Nicole Sullivan’s ‘media’ object ( &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;more info&lt;/a&gt; ), so really we could do something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clearfix&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* SASS inclusion of a clear fix for floated children */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.media-img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.media-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And we could markup our search result as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;media searchresult&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;media-img searchresult-img&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;media-content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;searchresult-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;A result!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is good, we found something&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Immediate reactions may be that theres a lot of classes for not a lot of styling, but the &lt;em&gt;massive&lt;/em&gt; point here is it can be reused all over the site for similar design elements, we’re coding a pattern first and for most then adding the detail.&lt;/p&gt;

&lt;p&gt;Lastly an important lesson from SMACSS and indeed OOCSS approach as a whole is, if it hadn’t become obvious already, &lt;strong&gt;low specificity selectors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The benefit you gain here is that you avoid having to write long complicated selectors just because one before is overruling it. ID’s are the big villains here, and in your general day to day CSS coding you shouldn’t be using them.&lt;/p&gt;

&lt;p&gt;Indeed this approach comes with a challenge of its own, the order of your rules is now incredibly important. Rather than authoring your stylesheet ‘as you go’, you have to pay closer attention to the order in which things are defined. In our above search results example, we’d want our .searchresults module to override our .media module if it so chooses, this hierarchy of modules should also be reflected in our markup markup &amp;lt;div class=&quot;media searchresult&quot;&amp;gt;, so its quite clear what is extending or overriding what without digging into the stylesheet.&lt;/p&gt;

&lt;p&gt;I’ve waltzed through quite a few things there, the main purpose was to clarify some of my own thoughts but I do hope it has some benefit to others. Its an exciting area, especially since it is just a change in approach, but there are so many benefits, problems and enhancements to discuss in one blog post so hopefully I’ll get to those in future updates.&lt;/p&gt;

&lt;p&gt;Comments are on and I’d love to hear any thoughts on this subject or specific posts, especially any issues people may have encountered adopting OOCSS.&lt;/p&gt;

&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://smacss.com/&quot;&gt;SMACSS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://oocss.org/&quot;&gt;OOCSS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=R-BX4N8egEc&amp;amp;list=UUMrzZG3q64oQmP_ouYn7yVA&amp;amp;index=1&amp;amp;feature=plcp&quot;&gt;Harry Roberts - Big CSS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;The Media Object - Nicole Sullivan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Tue, 01 May 2012 19:45:00 +0100</pubDate>
        <link>http://ryanhyslop.uk/opinion/2012/05/01/taming-the-sheet-thoughts-on-modern-css-authoring.html</link>
        <guid isPermaLink="true">http://ryanhyslop.uk/opinion/2012/05/01/taming-the-sheet-thoughts-on-modern-css-authoring.html</guid>
        
        
        <category>opinion</category>
        
      </item>
    
  </channel>
</rss>
