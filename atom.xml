<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan Hyslop - Frontend Developer]]></title>
  <link href="http://barkingtiger.com/atom.xml" rel="self"/>
  <link href="http://barkingtiger.com/"/>
  <updated>2013-12-29T15:09:57+00:00</updated>
  <id>http://barkingtiger.com/</id>
  <author>
    <name><![CDATA[Ryan Hyslop]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento Theming: Working With Layout]]></title>
    <link href="http://barkingtiger.com/written/2012/10/25/magento-theming-working-with-layout/"/>
    <updated>2012-10-25T22:08:00+01:00</updated>
    <id>http://barkingtiger.com/written/2012/10/25/magento-theming-working-with-layout</id>
    <content type="html"><![CDATA[<p>Any frontend developer who&rsquo;s taken a passive interest or a curious look into Magento theming will remember the moment when they recoiled and thought; &ldquo;Honestly, wtf&rdquo;.</p>

<p>It&rsquo;s in our nature as developers to dive into things, at least initially. If something catches our interest we want to see straight away how it works, so rather than reading around a subject, perhaps doing a tutorial first, we rip off the mask and see the god awful monster staring back at us. We scream, it screams and we all run away, and for some people thats enough Magento for them.</p>

<p>There&rsquo;s no denying the theming engine in Magento takes patience to learn and can be frustrating in places, notably due to a lack of documentation and the blind ineffectively leading the blind.</p>

<p><em>This post wont teach you how to theme in magento but will detail some general concepts and tips to do some common things that should ease your pain.</em></p>

<!--more-->


<h2>Layouts</h2>


<p>The layout part of Magento theming is generally the one that catches most people out, since its quite unique to Magento. If you&rsquo;re still struggling to grasp the relationship between the layout xml files and the templates the best &lsquo;non-technical&rsquo; description I can give, is that your Template files ( the .phtml ) provide a placeholder ( $this->getChildHtml(&lsquo;&rsquo;); ) for your layout blocks to insert themselves into. You can then order your blocks, remove some in your layout xml documents. Why is this better than editing the .phtml files? Enter local.xml</p>

<h2>local.xml</h2>


<p>If you&rsquo;ve done any level Magento development and not used local.xml in your theme, prepare to kick yourself.</p>

<p>Some outdated tutorials and forum posts, and indeed the template layer, encourage you to copy the files you want to change over from the base theme into your local theme. Gotta change something in catalog.xml? Easy, just copy that to <em>/mytheme/default/layout/</em> right? Well you could, it would work, but overriding hundreds of lines of core code just to change 1 line is overkill, not to mention if an upgrade changes catalog.xml a bit then things are gonna break, hard.</p>

<p>I won&rsquo;t pander too much as most themers will be aware of this file but essentially it lets you add layout handles that effect modules throughout the site. Need to remove the newsletter module signup from across the site? Rather than edit newsletter.xml. Just add the following to the local.xml:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;default&gt;</span>
</span><span class='line'>    <span class="nt">&lt;remove</span> <span class="na">name=</span><span class="s">&quot;left.newsletter&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/default&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can control so much with local.xml it should most likely be the <em>only</em> file in your themes layout/ folder, so then, what can we do?</p>

<h2>Referencing and Moving</h2>


<p>If there is something you need to amend, first find its handle in its module&rsquo;s xml file. For example the Product view uses catalog.xml and its &lsquo;handle&rsquo; is catalog_product_view. Create the relevant nodes in your local.xml</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;catalog</span><span class="na">_product_view</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Now we can override stuff from the catalog.xml, 1 line, 2 lines or everything if needed --&gt;</span>Â 
</span><span class='line'><span class="err">&lt;</span>/catalog_product_view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve specified the handle you need to open a reference to the area you want to influence, the reference is the &lsquo;name&rsquo; of the parent node. So still using catalog.xml and the catalog_product_view as an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;block</span> <span class="na">type=</span><span class="s">&quot;catalog/product_view&quot;</span> <span class="na">name=</span><span class="s">&quot;product.info&quot;</span> <span class="na">template=</span><span class="s">&quot;catalog/product/view.phtml&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ....
</span><span class='line'>    <span class="nt">&lt;block</span> <span class="na">type=</span><span class="s">&quot;catalog/product_view_description&quot;</span> <span class="na">name=</span><span class="s">&quot;product.description&quot;</span> <span class="na">as=</span><span class="s">&quot;description&quot;</span> <span class="na">template=</span><span class="s">&quot;catalog/product/view/description.phtml&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ....
</span><span class='line'>    <span class="nt">&lt;/block&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>In this case if we wanted to effect &ldquo;product.description&rdquo; we&rsquo;d open up a reference to its parent &ldquo;product.info&rdquo; :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;catalog</span><span class="na">_product_view</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;product.info&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- we can now effect anything inside this reference --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/reference&gt;</span>
</span><span class='line'><span class="err">&lt;</span>/catalog_product_view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>More often than not you&rsquo;ll be calling a higher level reference such as &ldquo;content&rdquo;, &ldquo;left&rdquo; or &ldquo;right&rdquo;.</p>

<p>One of the most common things you&rsquo;ll need to do is either remove elements or move them around, so lets look at the best way of doing that.</p>

<h3>&#8220;Definately wont be needing that&#8221;</h3>


<p>If you absolutely do not need something in your templates you can call remove on it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;catalog</span><span class="na">_product_view</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;product.info&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;remove</span> <span class="na">name=</span><span class="s">&quot;product.description&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/reference&gt;</span>
</span><span class='line'><span class="err">&lt;</span>/catalog_product_view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This means its completely removed from the theme, we can&rsquo;t use it anywhere else, which in this case is possibly a bad idea, what if we just wanted to put it somewhere else?</p>

<h3>&#8220;I wanna put that over there&#8221;</h3>


<p>Say you don&rsquo;t want the breadcrumbs rendering where they do normally, you want to put them in another reference you&rsquo;ve styled differently, you&rsquo;ve created the reference now you want to stick the breadcrumbs in there:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;default&gt;</span>
</span><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;root&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">method=</span><span class="s">&quot;unsetChild&quot;</span><span class="nt">&gt;&lt;name&gt;</span>breadcrumbs<span class="nt">&lt;/name&gt;&lt;/action&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/reference&gt;</span>
</span><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;masthead.sub&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;action</span> <span class="na">method=</span><span class="s">&quot;insert&quot;</span><span class="nt">&gt;&lt;child&gt;</span>breadcrumbs<span class="nt">&lt;/child&gt;&lt;/action&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/reference&gt;</span>
</span><span class='line'><span class="nt">&lt;/default&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These sort of things are really handy as they stop you touching the template files which is always a good thing if you can get away with it.</p>

<h3>&#8220;But I need to put that somewhere that doesn&#8217;t have Â a reference&#8221;.</h3>


<p>Why not create a new reference? I&rsquo;ve found myself having to do this for things like &ldquo;masthead&rdquo; where theres an area between the normal header and the main page and I want to inject banners or other content to it. A lot of documentation tells you to add them to page.xml, but you can add them in your local.xml in the root reference:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;default&gt;</span>
</span><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;root&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;block</span> <span class="na">type=</span><span class="s">&quot;core/text_list&quot;</span> <span class="na">name=</span><span class="s">&quot;masthead&quot;</span> <span class="na">as=</span><span class="s">&quot;masthead&quot;</span> <span class="na">translate=</span><span class="s">&quot;label&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="nt">&lt;label&gt;</span>Masthead<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/block&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/reference&gt;</span>
</span><span class='line'><span class="nt">&lt;/default&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For those that may not know the default handle effects every page on the site, and the root reference is, well its the very top reference. You can do other cool things here like set the default template for every page, within your local.xml</p>

<h3>&#8220;Hey, everything has a 3 columns by default, most my pages are two column left&#8221;</h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;default&gt;</span>
</span><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;root&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">method=</span><span class="s">&quot;setTemplate&quot;</span><span class="nt">&gt;&lt;template&gt;</span>page/2column-left.phtml<span class="nt">&lt;/template&gt;&lt;/action&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/reference&gt;</span>
</span><span class='line'><span class="nt">&lt;/default&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom! Everything will now be 2 column left unless overridden somewhere else, you can leave page.xml in the base theme.</p>

<h2>Other Little Tricks</h2>


<p>In Magento sometimes the little things can be the most frustrating, here are a couple of problems I&rsquo;ve run into with some snippets to save the pain.</p>

<h3>&#8220;The product grid is showing 3 items per row, dammit I need 4!&#8221;</h3>


<p>This little nugget will help you here, I keep coming back to it so its actually good I have it published somewhere:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;reference</span> <span class="na">name=</span><span class="s">&quot;product_list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;action</span> <span class="na">method=</span><span class="s">&quot;setColumnCount&quot;</span><span class="nt">&gt;&lt;count&gt;</span>4<span class="nt">&lt;/count&gt;&lt;/action&gt;</span>
</span><span class='line'><span class="nt">&lt;/reference&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<h3>&#8220;If only I could wrap that block in another div and set a class on it&#8221;</h3>


<p>Before you go reaching to override that template file just to wrap the block in a container for styling purposes, have a little consideration for this snippet. It&rsquo;ll wrap your target block (myblock)Â in a div element and you can set a class on it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;block</span> <span class="na">type=</span><span class="s">&quot;page/html_wrapper&quot;</span> <span class="na">name=</span><span class="s">&quot;myblock.wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">method=</span><span class="s">&quot;setElementClass&quot;</span><span class="nt">&gt;&lt;value&gt;</span>my-wrapper-classname<span class="nt">&lt;/value&gt;&lt;/action&gt;</span>
</span><span class='line'>    <span class="nt">&lt;block</span> <span class="na">type=</span><span class="s">&quot;page/html&quot;</span> <span class="na">name=</span><span class="s">&quot;myblock&quot;</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- add your block in here --&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<h3>&#8220;I can&#8217;t stands no more&#8221;</h3>


<p>We&rsquo;ll leave it there then, I hope the above helps someone as I&rsquo;ve had to learn some of these lessons the hard way over the years, I&rsquo;ll try and continue to put out stuff that will help beginner magento themers get it right the easy way in the future.</p>

<p>Its important to note that we do poke fun at Magento for being difficult, but in reality its a massively complicated andÂ immenselyÂ powerful platform, and in the right hands you can do amazing things, very quickly. You just need to train those hands.</p>

<p>Futher Reading : <a href="http://magebase.com/magento-tutorials/demystifying-magentos-layout-xml-part-1/"><a href="http://magebase.com/magento-tutorials/demystifying-magentos-layout-xml-part-1/">http://magebase.com/magento-tutorials/demystifying-magentos-layout-xml-part-1/</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming the Sheet - Thoughts on modern CSS Authoring]]></title>
    <link href="http://barkingtiger.com/written/2012/05/01/taming-the-sheet-thoughts-on-modern-css-authoring/"/>
    <updated>2012-05-01T19:45:00+01:00</updated>
    <id>http://barkingtiger.com/written/2012/05/01/taming-the-sheet-thoughts-on-modern-css-authoring</id>
    <content type="html"><![CDATA[<p>One of the biggest challenges once a developer has a grasp of new language is how to implement it effectively and sensibly.</p>

<p>A lot of established languages have design patterns to draw upon, blueprints of code that experienced developers over time have curated as âbest practiceâ. These patterns or approaches give newer developers a reference point to see how developing in a certain manner will be more effective.</p>

<p>CSS has always lacked this, as by its very nature it is very flexible and the types of sites it can be applied to vary enormously, never the less browser implementation of more advanced CSS modules has exploded over the past 2 years and our stylesheets are growing as are the complexity of the websites we are building. We. Need. Order!</p>

<!--more-->


<p>Fortunately people are stepping back and thinking about how we can tame these unwieldily documents of hashes and dots. In my opinion there are 2 major areas in which, once considered, can dramatically change the way you author CSS, for the better of course.</p>

<h2>1. Build Components, Not Pages.</h2>


<p>The DRY principle is a foundation of software engineering, put simply if youâre writing the same stuff over and over again a voice in your head should be tutting disapprovingly and spurring you into thinking âSurely thereâs a better wayâ, enter OOCSS.</p>

<p>In production weâre historically used to developing pages individually, Ok thats the homepage done now lets look at the product page, our approach to building parts of these pages can generally be reflected in our Stylesheets and Markup</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#home-products</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#catalog-index</span> <span class="nc">.product-list</span> <span class="nt">li</span><span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These ( slightly exaggerated ) examples illustrate that weâve styled up an area of the page based on either; where it is, or its function. The key issue here is, at a top level, these elements may have styles in common with other components, or these components could move within the site layout.</p>

<p>Addressing these issues doesnât require learning new techniques, syntax or properties, just a slight change in approach. By stepping back from the design and identifying layout and style patterns that can be abstracted into small classes that can be applied to multiple elements.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.list-inline</span> <span class="o">&gt;</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we now have a more generic class that we can apply to anything that needs to be floated left with a margin, and this leads us on nicely toâ¦</p>

<h2>2. Form not Function.</h2>


<p>Theres been quite a bit of discussion lately on the merit of &lsquo;semantic classnames&rsquo; in css, usually with an arrest trial and execution of &lsquo;.red {}&rsquo;, but that could be the subject of another post entirely. There is a lot to be said however, for decoupling your class names from what it is your styling, and providing a classname that is more appropriate to the output.</p>

<p>A Good example is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c"> .callout</span>
</span><span class='line'><span class="c"> - A base class to format areas that need to stand out from other content</span>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'><span class="nc">.callout</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span><span class="m">1em</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-bottom</span><span class="o">:</span><span class="m">1em</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span><span class="nb">black</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span><span class="nb">white</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.callout-important</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span><span class="m">1</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are defining a class that&rsquo;ll style an area of our site that stands out from the rest of the site, calling out, if you will. What this example further illustrates is the idea of establishing a &lsquo;base&rsquo; class, and extending it with variations, we then apply these classes as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;callout callout-important&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A personal favourite example of abstracting shared styles to a root class for sub classes to extend is one Harry Robberts ( @csswizardry ) demoâd on jsfiddle for buttons:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Buttons */</span>
</span><span class='line'><span class="nc">.btn</span><span class="p">{</span>
</span><span class='line'> <span class="k">font</span><span class="o">:</span><span class="k">inherit</span><span class="p">;</span> <span class="c">/* Normalise fonts across &lt;;a&gt;;s and form buttons. */</span>
</span><span class='line'> <span class="k">text-decoration</span><span class="o">:</span><span class="k">none</span><span class="p">;</span> <span class="c">/* Normalise hover behaviour. */</span>
</span><span class='line'> <span class="k">cursor</span><span class="o">:</span><span class="k">pointer</span><span class="p">;</span> <span class="c">/* Normalise hover behaviour. */</span>
</span><span class='line'> <span class="k">border</span><span class="o">:</span><span class="k">none</span><span class="p">;</span> <span class="c">/* Normalise border styles (or lack thereof). */</span>
</span><span class='line'> <span class="k">line-height</span><span class="o">:</span><span class="m">1</span><span class="p">;</span> <span class="c">/* Remove line-height so we can size with padding. */</span>
</span><span class='line'> <span class="k">display</span><span class="o">:</span><span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span> <span class="c">/* Normalise display state. */</span>
</span><span class='line'> <span class="k">margin</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'> <span class="c">/* Cosmetics */</span>
</span><span class='line'> <span class="k">padding</span><span class="o">:</span><span class="m">0.5em</span><span class="p">;</span> <span class="c">/* Set in ems so we can scale buttons up with font-size alone. */</span>
</span><span class='line'> <span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span>
</span><span class='line'> <span class="k">background-color</span><span class="o">:</span><span class="m">#ACE</span><span class="p">;</span>
</span><span class='line'> <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span><span class="m">4px</span><span class="p">;</span>
</span><span class='line'> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span><span class="m">0.2s</span><span class="p">;</span>
</span><span class='line'> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span><span class="m">0.2s</span><span class="p">;</span>
</span><span class='line'> <span class="n">transition</span><span class="o">:</span><span class="m">0.2s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="nc">.btn</span><span class="nd">:hover</span><span class="p">{</span>
</span><span class='line'> <span class="k">background-color</span><span class="o">:</span><span class="m">#FAB</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="nc">.btn-sml</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:.</span><span class="m">75em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.btn-lrg</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span><span class="m">1.5em</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have 1 class, that when applied to either an anchor, input or button element will render the same style. If we need a bigger button, we create a sub class with any additional styles or overrides, and add both classes to the element.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-sml&quot;</span><span class="nt">&gt;</span>Small button<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wizardry indeed.</p>

<h2>Organisation</h2>


<p>A big challenge for yourself, and especially in a team is harmonising your coding preferences and style into a format that works best for everyone. Ultimately the key is to establish a convention and stick to it, I do feel though it slightly naive to stick to an approach youâve developed yourself without looking at what other people are doing.</p>

<p>In my opinion a landmark publication in this area is Jonathan Snooksâ SMACSS.</p>

<p>In its own words&hellip;</p>

<p>&ldquo;<em>SMACSS is a way to examine your design process and as a way to fit those rigid frameworks into a flexible thought process. It is an attempt to document a consistent approach to site development when using CSS</em>&rdquo;</p>

<p>I canât recommend this book enough for an introduction into really considering how you write and organise your CSS. One of the huge benefits of Jonathans ( or Mr Snook, to give him his full Dr Suess name) approach is that its open to interpretation and it gives you ideas, but maintains a solid but transferable philosophy that advocates a modular coding style.</p>

<p>Some of my takeaway points from SMACCS are:</p>

<h3>Organisation of your code into:</h3>


<ul>
    <li>Base</li>
    <li>Layout</li>
    <li>Module</li>
    <li>State</li>
    <li>(Theme)</li>
</ul>


<p>This organisation reinforces the idea of the cascade and inheritance in CSS, and indeed the order in which your code should nest.</p>

<p>The base provides your defaults, its styling to <em>elements</em> not classes, and will step up if you don&rsquo;t provide any further styling with your modules. Layout houses your modules, it provides the grid, the structure for which the modules will sit.
Your modules are &ldquo;discrete component[s] of the page&rdquo;, they are developed in a manner so they could be moved within a layout, or reused in varying contexts and still maintain their appearance. Modules can extend one another (as we&rsquo;ve previously seen) to provide variance to a widget or component.</p>

<p>Lastly state provides overruling styles, typically to a module, depending on what it should be communicating (eg.loading, success, error).</p>

<h3>Prefixing of your layout rules &amp; namespacing of modules</h3>


<p>Admittedly not something I&rsquo;d given much thought till until I&rsquo;d read SMACCS but one of those things that I&rsquo;m taking for granted now. Our layout classes govern the structure of our site and so we can tell thats the case with our class names we prefix them:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.l-main</span> <span class="p">{</span>
</span><span class='line'><span class="k">width</span><span class="o">:</span><span class="m">70</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.l-sidebar</span> <span class="p">{</span>
</span><span class='line'><span class="k">width</span><span class="o">:</span><span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="k">float</span><span class="o">:</span><span class="k">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.l-masthead</span> <span class="p">{</span>
</span><span class='line'><span class="c">/* */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Immediately when viewing our markup we can see these classes are providing layout rules to our elements:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;l-main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;callout&quot;</span><span class="nt">&gt;&lt;p&gt;</span>Hello<span class="nt">&lt;/p&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;l-sidebar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;callout callout-minor&quot;</span><span class="nt">&gt;&lt;p&gt;</span>by the way..<span class="nt">&lt;/p&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit of prefixing your layout rules (and state as we&rsquo;ll see) is that modules, which make up the bulk of your site, can remain prefix less as we can assume if it hasn&rsquo;t got a prefix, its a module. This lets us avoid things like:
<em>.m-searchresult</em>
or
<em>.searchresult-obj</em></p>

<p>Its just <em>.searchresult.</em></p>

<p>How do we organise our modules then?</p>

<h3>Namespacing</h3>


<p>Taking our search result for example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.searchresult</span> <span class="p">{</span>
</span><span class='line'> <span class="k">padding</span><span class="o">:</span><span class="m">1em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.searchresult-title</span> <span class="p">{</span>
</span><span class='line'> <span class="k">color</span><span class="o">:</span><span class="nb">blue</span><span class="p">;</span>
</span><span class='line'> <span class="k">margin-bottom</span><span class="o">:</span><span class="m">2em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.searchresult-image</span> <span class="p">{</span>
</span><span class='line'><span class="k">border</span><span class="o">:</span><span class="m">2px</span> <span class="k">solid</span> <span class="nb">orange</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prefixing our modules components with its name is fairly self explanatory in its benefits, it keeps the code organised and we know exactly what it is applied to. Its specific, a bit, too, damn specific!</p>

<p>The huge benefit to these low level selectors is that we can mix and match modules to reuse common design patterns throughout the site. Our search result example, since it has an image, would probably have an image and text inline with one another. This is a common pattern identified in Nicole Sullivan&rsquo;s &lsquo;media&rsquo; object ( <a href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/">more info</a>Â ), so really we could do something like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.media</span> <span class="p">{</span>
</span><span class='line'> <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">clearfix</span> <span class="c">/* SASS inclusion of a clear fix for floated children */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.media-img</span> <span class="p">{</span>
</span><span class='line'> <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'> <span class="k">margin-left</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.media-content</span> <span class="p">{</span>
</span><span class='line'> <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we could markup our search result as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;media searchresult&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;media-img searchresult-img&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;image.jpg&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>
</span><span class='line'> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;media-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;searchresult-heading&quot;</span><span class="nt">&gt;</span>A result!<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'> <span class="nt">&lt;p&gt;</span>This is good, we found something<span class="nt">&lt;/p&gt;</span>
</span><span class='line'> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Immediate reactions may be that theres a lot of classes for not a lot of styling, but the <em>massive</em> point here is it can be reused all over the site for similar design elements, we&rsquo;re coding a pattern first and for most then adding the detail.</p>

<p>Lastly an important lesson from SMACSS and indeed OOCSS approach as a whole is, if it hadn&rsquo;t become obvious already,Â <strong>low specificity selectors</strong>.</p>

<p>The benefit you gain here is that you avoid having to write long complicated selectors just because one before is overruling it. ID&rsquo;s are the big villains here, and in your general day to day CSS coding you shouldn&rsquo;t be using them.</p>

<p>Indeed this approach comes with a challenge of its own, the order of your rules is now incredibly important. Rather than authoring your stylesheet &lsquo;as you go&rsquo;, you have to pay closer attention to the order in which things are defined. In our above search results example, we&rsquo;d want our .searchresults module to override our .media module if it so chooses, this hierarchy of modules should also be reflected in our markup markup <div class="media searchresult">, so its quite clear what is extending or overriding what without digging into the stylesheet.</p>

<p>I&rsquo;ve waltzed through quite a few things there, the main purpose was to clarify some of my own thoughts but I do hope it has some benefit to others. Its an exciting area, especially since it is just a change in approach, but there are so many benefits, problems and enhancements to discuss in one blog post so hopefully I&rsquo;ll get to those in future updates.</p>

<p>Comments are on and I&rsquo;d love to hear any thoughts on this subject or specific posts, especially any issues people may have encountered adopting OOCSS.</p>

<p>Further Reading:</p>

<ul>
    <li><a href="http://smacss.com/">SMACSS</a></li>
    <li><a href="http://oocss.org/">OOCSS</a></li>
    <li><a href="http://www.youtube.com/watch?v=R-BX4N8egEc&amp;list=UUMrzZG3q64oQmP_ouYn7yVA&amp;index=1&amp;feature=plcp">Harry Roberts - Big CSS</a></li>
    <li><a href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/">The Media Object - Nicole Sullivan</a></li>
</ul>


<p>&nbsp;</p>
]]></content>
  </entry>
  
</feed>
